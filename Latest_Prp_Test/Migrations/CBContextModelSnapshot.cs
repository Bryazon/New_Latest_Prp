// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication7.Data;

namespace WebApplication7.Migrations
{
    [DbContext(typeof(CBContext))]
    partial class CBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Forename");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("OrganisationId");

                    b.Property<string>("Surname");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("OrganisationId");

                    b.Property<decimal>("Price");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.PropertyContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContactId");

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsMain");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("PropertyId");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyContacts");
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.PropertyImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsMain");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("PropertyId");

                    b.Property<string>("Title");

                    b.Property<string>("URL");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyImages");
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.SystemUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.Property<int?>("OrganisationId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("SystemUsers");
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.SystemUserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<bool>("IsMain");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Title");

                    b.Property<string>("URL");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SystemUserImages");
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.SystemUserLogin", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<int?>("UserId");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<DateTime>("Modified");

                    b.Property<string>("Name");

                    b.Property<int?>("OrganisationId");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.TeamMembership", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<bool>("IsMain");

                    b.Property<DateTime>("Modified");

                    b.Property<int?>("OrganisationId");

                    b.Property<int?>("TeamId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserId");

                    b.ToTable("TeamMemberships");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplication7.Data.Entities.SystemUserLogin")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplication7.Data.Entities.SystemUserLogin")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebApplication7.Data.Entities.SystemUserLogin")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplication7.Data.Entities.SystemUserLogin")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.Contact", b =>
                {
                    b.HasOne("WebApplication7.Data.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.OwnsOne("WebApplication7.Data.Entities.Complex_Types.Address", "Address", b1 =>
                        {
                            b1.Property<int>("ContactId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1");

                            b1.Property<string>("Address2");

                            b1.Property<string>("Address3");

                            b1.Property<string>("Address4");

                            b1.Property<string>("HouseName");

                            b1.Property<string>("HouseNumber");

                            b1.Property<string>("PostalCode");

                            b1.ToTable("Contacts");

                            b1.HasOne("WebApplication7.Data.Entities.Contact")
                                .WithOne("Address")
                                .HasForeignKey("WebApplication7.Data.Entities.Complex_Types.Address", "ContactId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.Organisation", b =>
                {
                    b.OwnsOne("WebApplication7.Data.Entities.Complex_Types.Address", "Address", b1 =>
                        {
                            b1.Property<int>("OrganisationId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1");

                            b1.Property<string>("Address2");

                            b1.Property<string>("Address3");

                            b1.Property<string>("Address4");

                            b1.Property<string>("HouseName");

                            b1.Property<string>("HouseNumber");

                            b1.Property<string>("PostalCode");

                            b1.ToTable("Organisations");

                            b1.HasOne("WebApplication7.Data.Entities.Organisation")
                                .WithOne("Address")
                                .HasForeignKey("WebApplication7.Data.Entities.Complex_Types.Address", "OrganisationId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.Property", b =>
                {
                    b.HasOne("WebApplication7.Data.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.OwnsOne("WebApplication7.Data.Entities.Complex_Types.Address", "Address", b1 =>
                        {
                            b1.Property<int>("PropertyId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1");

                            b1.Property<string>("Address2");

                            b1.Property<string>("Address3");

                            b1.Property<string>("Address4");

                            b1.Property<string>("HouseName");

                            b1.Property<string>("HouseNumber");

                            b1.Property<string>("PostalCode");

                            b1.ToTable("Properties");

                            b1.HasOne("WebApplication7.Data.Entities.Property")
                                .WithOne("Address")
                                .HasForeignKey("WebApplication7.Data.Entities.Complex_Types.Address", "PropertyId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.PropertyContact", b =>
                {
                    b.HasOne("WebApplication7.Data.Entities.Contact", "Contact")
                        .WithMany("VendorRoles")
                        .HasForeignKey("ContactId");

                    b.HasOne("WebApplication7.Data.Entities.Property", "Property")
                        .WithMany("VendorLinks")
                        .HasForeignKey("PropertyId");
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.PropertyImage", b =>
                {
                    b.HasOne("WebApplication7.Data.Entities.Property", "Property")
                        .WithMany("Images")
                        .HasForeignKey("PropertyId");
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.SystemUser", b =>
                {
                    b.HasOne("WebApplication7.Data.Entities.Organisation", "Organisation")
                        .WithMany("Users")
                        .HasForeignKey("OrganisationId");

                    b.OwnsOne("WebApplication7.Data.Entities.Complex_Types.Address", "Address", b1 =>
                        {
                            b1.Property<int>("SystemUserId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1");

                            b1.Property<string>("Address2");

                            b1.Property<string>("Address3");

                            b1.Property<string>("Address4");

                            b1.Property<string>("HouseName");

                            b1.Property<string>("HouseNumber");

                            b1.Property<string>("PostalCode");

                            b1.ToTable("SystemUsers");

                            b1.HasOne("WebApplication7.Data.Entities.SystemUser")
                                .WithOne("Address")
                                .HasForeignKey("WebApplication7.Data.Entities.Complex_Types.Address", "SystemUserId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.SystemUserImage", b =>
                {
                    b.HasOne("WebApplication7.Data.Entities.SystemUser", "User")
                        .WithMany("UserImages")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.SystemUserLogin", b =>
                {
                    b.HasOne("WebApplication7.Data.Entities.SystemUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.Team", b =>
                {
                    b.HasOne("WebApplication7.Data.Entities.Organisation", "Organisation")
                        .WithMany("Teams")
                        .HasForeignKey("OrganisationId");

                    b.OwnsOne("WebApplication7.Data.Entities.Complex_Types.Address", "Address", b1 =>
                        {
                            b1.Property<int>("TeamId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("Address1");

                            b1.Property<string>("Address2");

                            b1.Property<string>("Address3");

                            b1.Property<string>("Address4");

                            b1.Property<string>("HouseName");

                            b1.Property<string>("HouseNumber");

                            b1.Property<string>("PostalCode");

                            b1.ToTable("Teams");

                            b1.HasOne("WebApplication7.Data.Entities.Team")
                                .WithOne("Address")
                                .HasForeignKey("WebApplication7.Data.Entities.Complex_Types.Address", "TeamId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("WebApplication7.Data.Entities.TeamMembership", b =>
                {
                    b.HasOne("WebApplication7.Data.Entities.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.HasOne("WebApplication7.Data.Entities.Team", "Team")
                        .WithMany("UserMembership")
                        .HasForeignKey("TeamId");

                    b.HasOne("WebApplication7.Data.Entities.SystemUser", "User")
                        .WithMany("TeamMembership")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
